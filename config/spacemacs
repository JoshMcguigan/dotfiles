;; -*- mode: emacs-lisp; lexical-binding: t -*-

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers '(
     javascript
     (auto-completion :variables
                      auto-completion-return-key-behavior 'nil
                      auto-completion-tab-key-behavior 'complete
                      )
     emacs-lisp
     git
     (version-control :variables
                      version-control-diff-tool 'git-gutter
                      version-control-diff-side 'left
                      )
     (ivy :variables ivy-enable-advanced-buffer-information t)
     (rust :variables
           rust-backend 'lsp)
     (lsp :variables
          lsp-rust-server 'rust-analyzer)
     multiple-cursors
     (shell :variables
            shell-default-shell 'vterm
            shell-default-position 'full)
     )

   ;; List of additional packages that will be installed without being wrapped
   ;; in a layer.
   dotspacemacs-additional-packages '(nord-theme vterm)

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behaviour of Spacemacs when installing packages.
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  (setq-default
   ;; If non-nil, show file icons for entries and headings on Spacemacs home buffer.
   dotspacemacs-startup-buffer-show-icons t

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'emacs-lisp-mode

   ;; If non-nil, *scratch* buffer will be persistent. Things you write down in
   ;; *scratch* buffer will be saved and restored automatically.
   dotspacemacs-scratch-buffer-persistent t

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   dotspacemacs-themes '(
                         spacemacs-light
                         nord
                        )

   ;; Set the theme for the Spaceline.
   dotspacemacs-mode-line-theme '(spacemacs :separator arrow :separator-scale 1.5)

   ;; Default font or prioritized list of fonts.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 12.0
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   ;; This cannot be null because spacemacs and related plugins put all their
   ;; bindings behind it. I am using a very obscure key here to effectively
   ;; disable it.
   dotspacemacs-leader-key "<f35>"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key nil

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab t

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.5

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup t

   ;; Control line numbers activation.
   dotspacemacs-line-numbers 'relative

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'current

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed

   ;; If non-nil then byte-compile some of Spacemacs files.
   dotspacemacs-byte-compile t))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env)
)

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."

  (setq-default git-magit-status-fullscreen t)

  ;; Disable persistent highlighting of search term after search completes.
  (setq evil-ex-search-highlight-all nil)
)


(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump."
)


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."

  (setq-default rust-format-on-save t)

  ;; Automatically refresh the configuration anytime it is updated.
  ;;
  ;; TODO
  ;; This doesn't handle if you open a symlinked version of the file, or if the user
  ;; has their config at ~/.spacemacs.d/init.el
  (add-hook 'after-save-hook (lambda ()
                               (if (string= (expand-file-name "~/.spacemacs") buffer-file-name)
                                    (dotspacemacs/sync-configuration-layers)
                                   )
                               ))

  ;; By default ivy will stop the search if the user tries to delete more characters
  ;; than exist in the search term.
  (setq ivy-on-del-error-function #'ignore)

  ;; Remove the evil mode mappings for C-p/C-n because they overlap with shell
  ;; behaviors (see below).
  (define-key evil-insert-state-map (kbd "C-p") nil)
  (define-key evil-insert-state-map (kbd "C-n") nil)
  ;; Add specific binding to the ielm repl for prev/nex items to match bash shell behavior.
  (add-hook 'ielm-mode-hook
  (lambda ()
    (define-key ielm-map (kbd "C-p") #'comint-previous-input)
    (define-key ielm-map (kbd "C-n") #'comint-next-input)
    ))

  ;; Map Ctrl-Shift-V to paste while in insert mode. Out of insert mode you can
  ;; paste with the standard vim `p`.
  (define-key evil-insert-state-map (kbd "C-S-V") #'yank)
  (evil-collection-define-key '(insert) 'vterm-mode-map (kbd "C-S-V") #'yank)

  ;; Configure projectile to find projects.
  ;;
  ;; Recursive depth limited for performance.
  (setq projectile-project-search-path '(("~/workspace" . 3)))

  ;; Copy highlighted (by the mouse) text to clipboard.
  (setq mouse-drag-copy-region t)

  ;; Replace all bindings under the default leader key with my own.
  ((lambda ()
     (setq me/default-map (make-sparse-keymap))

     (me/set-leader-keys "SPC" '("commands" . counsel-M-x))
     (me/set-leader-keys "TAB" '("last buffer" . spacemacs/alternate-buffer))
     (me/set-leader-keys "\'" '("shell" . spacemacs/default-pop-shell))
     (me/set-leader-keys "h" '("prev buffer" . previous-buffer))
     (me/set-leader-keys "l" '("next buffer" . next-buffer))
     (me/set-leader-keys "t" '("file tree" . me/open-dired))
     (me/set-leader-keys "w" '("save file" . save-buffer))

     (me/declare-prefix "f" "find")
     (me/set-leader-keys "ff" '("file" . counsel-projectile-find-file))
     (me/set-leader-keys "fi" '("in current file" . counsel-grep-or-swiper))
     (me/set-leader-keys "fp" '("in current project" . counsel-projectile-rg))

     (me/declare-prefix "n" "navigate")
     (me/set-leader-keys "nc" '("spacemacs config" . spacemacs/find-dotfile))
     (me/set-leader-keys "nf" '("file" . counsel-find-file))
     (me/set-leader-keys "nm" '("messages" . spacemacs/switch-to-messages-buffer))
     (me/set-leader-keys "np" '("project" . counsel-projectile-switch-project))
     (me/set-leader-keys "nr" '("recent" . counsel-recentf))
     (me/set-leader-keys "ns" '("scratch" . spacemacs/switch-to-scratch-buffer))

     (me/declare-prefix "v" "vcs")
     (me/set-leader-keys "vh" '("prev hunk" . spacemacs/vcs-previous-hunk))
     (me/set-leader-keys "vl" '("next hunk" . spacemacs/vcs-next-hunk))
     (me/set-leader-keys "vr" '("revert hunk" . spacemacs/vcs-revert-hunk))
     (me/set-leader-keys "vs" '("status" . magit-status))
     (me/set-leader-keys "vv" '("view hunk" . spacemacs/vcs-show-hunk))

     (bind-map me/default-map
       :prefix-cmd me-cmds
       :evil-keys ("SPC")
       :override-minor-modes t
       :override-mode-name me-leader-override-mode)
  ))

  ;; Configure mode-line.
  ((lambda ()
     (spaceline-define-segment buffer-id
       (if (buffer-file-name)
           (abbreviate-file-name (buffer-file-name))
         (powerline-buffer-id)))
     (spaceline-toggle-buffer-size-off)
     (spaceline-toggle-purpose-off)
     (spaceline-toggle-buffer-encoding-abbrev-off)
     (spaceline-toggle-hud-off)
  ))

  ;; Configure dired.
  ((lambda ()
     (evil-collection-define-key 'normal 'dired-mode-map
       "h" #'dired-up-directory
       "l" #'dired-find-file)
     (setq dired-listing-switches "-agho --group-directories-first")
  ))

)

(defun me/open-dired ()
  "If in a project, open dired at the project root. Otherwise open
dired in the directory of the current buffer."
  (interactive)
  (if (projectile-project-p)
      (projectile-dired)
      (dired-jump)
    )
  )

(defun me/set-leader-keys (key def &rest bindings)
  "Add KEY and DEF as key bindings under `me/leader-key'.
KEY should be a string suitable for passing to `kbd', and it
should not include the leaders. DEF is most likely a quoted
command. See `define-key' for more information about the possible
choices for DEF. This function simply uses `define-key' to add
the bindings.

For convenience, this function will accept additional KEY DEF
pairs. For example,

\(me/set-leader-keys
   \"a\" 'command1
   \"C-c\" 'command2
   \"bb\" 'command3\)

This function was taken from spacemacs/set-leader-keys and
adapted to configure my keymap."
  (while key
    (define-key me/default-map (kbd key) def)
    (setq key (pop bindings) def (pop bindings))))

(defun me/declare-prefix (prefix name &rest more)
  "Declare a prefix PREFIX. PREFIX is a string describing a key
sequence. NAME is a string used as the prefix command.

This function was taken from spacemacs/declare-prefix and
adapted to configure my keymap."
  (declare (indent defun))
  (apply #'which-key-add-keymap-based-replacements me/default-map
         prefix name more))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(git-gutter-fringe fringe-helper git-gutter diff-hl browse-at-remote ivy-rich persistent-scratch wgrep smex lsp-ivy ivy-yasnippet ivy-xref ivy-purpose ivy-hydra ivy-avy counsel-projectile counsel swiper ivy stickyfunc-enhance srefactor yasnippet-snippets xterm-color web-beautify vterm treemacs-magit toml-mode terminal-here smeargle shell-pop ron-mode racer rust-mode prettier-js npm-mode nord-theme nodejs-repl multi-term lsp-ui lsp-treemacs lsp-origami origami livid-mode skewer-mode simple-httpd json-reformat json-navigator hierarchy json-mode json-snatcher js2-refactor multiple-cursors js2-mode js-doc helm-lsp lsp-mode helm-ls-git helm-git-grep helm-company helm-c-yasnippet gitignore-templates git-timemachine git-modes git-messenger git-link fuzzy forge yaml magit ghub closql emacsql-sqlite emacsql treepy magit-section git-commit with-editor transient flycheck-rust flycheck-pos-tip pos-tip eshell-z eshell-prompt-extras esh-help company cargo markdown-mode auto-yasnippet yasnippet ac-ispell auto-complete ws-butler writeroom-mode winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package undo-tree treemacs-projectile treemacs-persp treemacs-icons-dired treemacs-evil toc-org symon symbol-overlay string-inflection string-edit spaceline-all-the-icons restart-emacs request rainbow-delimiters quickrun popwin pcre2el password-generator paradox overseer org-superstar open-junk-file nameless multi-line macrostep lorem-ipsum link-hint inspector info+ indent-guide hybrid-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation hide-comnt helm-xref helm-themes helm-swoop helm-purpose helm-projectile helm-org helm-mode-manager helm-make helm-flx helm-descbinds helm-ag google-translate golden-ratio font-lock+ flycheck-package flycheck-elsa flx-ido fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-terminal-cursor-changer evil-surround evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-easymotion evil-collection evil-cleverparens evil-args evil-anzu eval-sexp-fu emr elisp-slime-nav elisp-def editorconfig dumb-jump drag-stuff dotenv-mode dired-quick-sort diminish devdocs define-word column-enforce-mode clean-aindent-mode centered-cursor-mode auto-highlight-symbol auto-compile aggressive-indent ace-link ace-jump-helm-line)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(highlight-parentheses-highlight ((nil (:weight ultra-bold))) t))
)
