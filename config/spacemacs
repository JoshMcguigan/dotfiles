;; -*- mode: emacs-lisp; lexical-binding: t -*-

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers '(
     csv
     yaml
     javascript
     (c-c++ :variables
            c-c++-backend 'lsp-ccls
            c-c++-lsp-enable-semantic-highlight t
            c-c++-enable-clang-format-on-save t
            )

     ;; The python layer depends on dap, and if you don't
     ;; explicitly install dap you enter an install/uninstall
     ;; loop. See the link below.
     ;;
     ;; https://github.com/syl20bnr/spacemacs/issues/13162
     (python :variables python-backend 'lsp)
     dap

     (auto-completion :variables
                      auto-completion-return-key-behavior 'nil
                      auto-completion-tab-key-behavior 'complete
                      )
     common-lisp
     emacs-lisp
     git
     (version-control :variables
                      version-control-diff-tool 'git-gutter
                      version-control-diff-side 'left
                      )
     (ivy :variables ivy-enable-advanced-buffer-information t)
     (rust :variables
           rust-backend 'lsp
           rust-format-on-save t)
     (lsp :variables
          lsp-rust-server 'rust-analyzer

          ;; Disable lsp mode lens to avoid the performance penalty.
          ;;
          ;; https://github.com/emacs-lsp/lsp-mode/issues/3219
          lsp-lens-enable nil
          )
     (shell :variables
            shell-default-shell 'vterm
            shell-default-position 'full)
     )

   ;; List of additional packages that will be installed without being wrapped
   ;; in a layer.
   dotspacemacs-additional-packages '(nord-theme vterm)

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behaviour of Spacemacs when installing packages.
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  (setq-default
   ;; If non-nil, show file icons for entries and headings on Spacemacs home buffer.
   dotspacemacs-startup-buffer-show-icons t

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'emacs-lisp-mode

   ;; If non-nil, *scratch* buffer will be persistent. Things you write down in
   ;; *scratch* buffer will be saved and restored automatically.
   dotspacemacs-scratch-buffer-persistent t

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   dotspacemacs-themes '(
                         spacemacs-light
                         nord
                        )

   ;; See spaceline-custom-theme defined in dotspacemacs/user-init
   ;; for the definition of the custom theme.
   dotspacemacs-mode-line-theme 'custom

   ;; Default font or prioritized list of fonts.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 12.0
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   ;; This cannot be null because spacemacs and related plugins put all their
   ;; bindings behind it. I am using a very obscure key here to effectively
   ;; disable it.
   dotspacemacs-leader-key "<f35>"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key nil

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab t

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.5

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup t

   ;; Control line numbers activation.
   dotspacemacs-line-numbers 'relative

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'current

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed

   ;; If non-nil then byte-compile some of Spacemacs files.
   dotspacemacs-byte-compile t))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env)
)

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."

  (setq-default git-magit-status-fullscreen t)

  ;; Disable persistent highlighting of search term after search completes.
  (setq evil-ex-search-highlight-all nil)

  ;; Disable evil-collection mapping of the buffer menu in favor of the default
  ;; evil mode maps.
  ;;
  ;; https://github.com/emacs-evil/evil-collection/issues/631
  (with-eval-after-load 'evil-collection-buff-menu
    (defun evil-collection-buff-menu-setup() ()))

  ;; Specify custom modeline.
  (defun spaceline-custom-theme (&rest additional-segments)
    (spaceline-compile
      `(
        (evil-state
         :face highlight-face
         :priority 100)
        ;; anzu displays the state of the active search.
        ;; TODO wrap this to show state of whatever we are n/N scrolling through.
        (anzu :priority 95)
        ((me/buffer-modified me/buffer-id)
         :priority 98)
        (major-mode :priority 79)
        (minor-modes
         :when active
         :priority 9)
        (me/version-control
         :when active
         :priority 78)
        )
      `(
        (selection-info :priority 95)
        ;; global is used to display lsp status.
        (global :when active)
        (line-column
         :priority 96)
        ,@additional-segments
        (buffer-position :priority 99)
        ))

    (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))

  ;; Treat underscores as part of words, better matching vim behavior.
  (add-hook 'after-change-major-mode-hook
            (lambda ()
              (modify-syntax-entry ?_ "w")))
)


(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump."
)


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."

  ;; Configure mode-line.
  (spaceline-define-segment me/buffer-id
    (if (buffer-file-name)
        (me/shorten-filepath
         (abbreviate-file-name (buffer-file-name))
         ;; Margin seems to be roughly the number of
         ;; character taken up by the things in the
         ;; modeline which are higher priority than
         ;; the file path.
         (let ((margin 20))(- (window-width) margin)))
      (powerline-buffer-id)))
  (spaceline-define-segment me/buffer-modified
    (if (buffer-modified-p)
        "\*" " "))
  (spaceline-define-segment me/version-control
    (when vc-mode
      (powerline-raw me/git-modeline)))
  (add-hook 'after-save-hook #'me/update-git-modeline)
  (add-hook 'buffer-list-update-hook #'me/update-git-modeline)

  ;; Automatically save the state of tabs/buffers when closing emacs, and
  ;; restore when re-opening.
  (add-hook 'spacemacs-post-user-config-hook
            (lambda ()
              (desktop-save-mode)
              (desktop-read)))

  (setq-default
   c-default-style "linux"
   c-basic-offset 4
   )

  ;; By default ivy will stop the search if the user tries to delete more characters
  ;; than exist in the search term.
  (setq ivy-on-del-error-function #'ignore)

  ;; Remove the evil mode mappings for C-p/C-n because they overlap with shell
  ;; behaviors (see below).
  (define-key evil-insert-state-map (kbd "C-p") nil)
  (define-key evil-insert-state-map (kbd "C-n") nil)
  ;; Add specific binding to the ielm repl for prev/nex items to match bash shell behavior.
  (add-hook 'ielm-mode-hook
  (lambda ()
    (define-key ielm-map (kbd "C-p") #'comint-previous-input)
    (define-key ielm-map (kbd "C-n") #'comint-next-input)
    ))

  ;; Map Ctrl-Shift-V to paste while in insert mode. Out of insert mode you can
  ;; paste with the standard vim `p`.
  (define-key evil-insert-state-map (kbd "C-S-V") #'yank)
  (evil-collection-define-key '(insert) 'vterm-mode-map (kbd "C-S-V") #'yank)

  ;; Configure projectile to find projects.
  ;;
  ;; Recursive depth limited for performance.
  (setq projectile-project-search-path '(("~/workspace" . 3)))

  ;; Copy highlighted (by the mouse) text to clipboard.
  (setq mouse-drag-copy-region t)

  ;; Replace all bindings under the default leader key with my own.
  ((lambda ()
     (setq me/default-map (make-sparse-keymap))

     (me/set-leader-keys "SPC" '("commands" . (lambda () (interactive) (counsel-M-x ""))))
     (me/set-leader-keys "TAB" '("last buffer" . spacemacs/alternate-buffer))
     (me/set-leader-keys "\'" '("shell" . vterm))
     (me/set-leader-keys "b" '("buffers" . (lambda () (interactive) (buffer-menu 1))))
     (me/set-leader-keys "B" '("buffers (all)" . buffer-menu))

     (me/set-leader-keys "e" '("next error" . me/traced-next-error))
     (me/set-leader-keys "E" '("prev error" . me/traced-previous-error))

     (me/declare-prefix "f" "find")
     ;; TODO add fF and fP which search in project directory but without
     ;;      checking gitignore
     (me/set-leader-keys "ff" '("file" . counsel-projectile-find-file))
     (me/set-leader-keys "fi" '("in current file" . counsel-grep-or-swiper))
     (me/set-leader-keys "fp" '("in current project" . counsel-projectile-rg))

     (me/set-leader-keys "h" '("next hunk" . me/traced-vcs-next-hunk))
     (me/set-leader-keys "H" '("prev hunk" . me/traced-vcs-previous-hunk))

     ;; Save l for local mappings (per project or on a local machine)
     ;; Save m for major mode

     (me/declare-prefix "n" "navigate")
     (me/set-leader-keys "nc" '("spacemacs config" . spacemacs/find-dotfile))
     (me/set-leader-keys "nC" '("local config" . me/find-local-config))
     (me/set-leader-keys "nf" '("file" . counsel-find-file))
     (me/set-leader-keys "nm" '("messages" . spacemacs/switch-to-messages-buffer))
     (me/set-leader-keys "np" '("project" . counsel-projectile-switch-project))
     (me/set-leader-keys "ns" '("scratch" . spacemacs/switch-to-scratch-buffer))

     (me/set-leader-keys "o" '("open file" . find-file))
     ;; TODO map O to a nice open remote file helper

     (me/set-leader-keys "q" '("close window" . evil-quit))

     (me/set-leader-keys "r" '("run" . projectile-repeat-last-command))
     (me/declare-prefix "R" "run (setup)")
     (me/set-leader-keys "Rc" '("compile" . projectile-compile-project))
     (me/set-leader-keys "RC" '("configure" . projectile-configure-project))
     (me/set-leader-keys "Ri" '("install" . projectile-install-project))
     (me/set-leader-keys "Rp" '("package" . projectile-package-project))
     (me/set-leader-keys "Rr" '("run" . projectile-run-project))
     (me/set-leader-keys "Rt" '("test" . projectile-test-project))

     (me/declare-prefix "s" "split")
     (me/set-leader-keys "sh" '("split left" . split-window-right))
     (me/set-leader-keys "sj" '("split down" . split-window-below-and-focus))
     (me/set-leader-keys "sk" '("split up" . split-window-below))
     (me/set-leader-keys "sl" '("split right" . split-window-right-and-focus))

     (me/set-leader-keys "t" '("file tree (project)" . me/open-dired))
     (me/set-leader-keys "T" '("file tree (current dir)" . dired-jump))

     (me/declare-prefix "v" "vcs")
     (me/set-leader-keys "vr" '("revert hunk" . spacemacs/vcs-revert-hunk))
     (me/set-leader-keys "vs" '("status" . magit-status))
     (me/set-leader-keys "vv" '("view hunk" . spacemacs/vcs-show-hunk))

     (me/set-leader-keys "w" '("save file" . save-buffer))

     (me/declare-prefix "y" "copy")
     (me/set-leader-keys "yg" '("git forge link" . spacemacs/git-link-copy-url-only))

     (bind-map me/default-map
       :prefix-cmd me-cmds
       :evil-keys ("SPC")
       :override-minor-modes t
       :override-mode-name me-leader-override-mode)
  ))

  ;; Setup shortcuts to manage the tab bar.
  ((lambda ()
     (bind-key* (kbd "M-<return>") #'tab-new)

     (bind-key* (kbd "M-l") #'tab-next)
     (bind-key* (kbd "M-h") #'tab-previous)
     (bind-key* (kbd "M-L") #'tab-bar-move-tab)
     (bind-key* (kbd "M-H") #'tab-bar-move-tab-backward)

     (bind-key* (kbd "M-q") #'tab-close)
     ))

  ;; Configure n/N to scroll through more than just search results.
  ((lambda ()
      (symbol-name 'me/navigate-active-search)
      (symbol-name 'me/navigate-active-hunks)
      (symbol-name 'me/navigate-active-errors)
      ;; Default to assuming a search is active, as that should
      ;; be safe at startup.
      (setq-default me/navigate-active 'me/navigate-active-search)

      ;; We track the direction the user is navigating (for example
      ;; did they use next-hunk or previous-hunk) and make n/N behave
      ;; appropriately.
      ;;
      ;; For search mode, this variable value is unused because
      ;; evil tracks this for us.
      (symbol-name 'me/navigate-forward)
      (symbol-name 'me/navigate-reverse)
      (setq-default me/navigate-direction 'me/navigate-forward)

      (defun me/trace-search (&rest args)
        (setq me/navigate-active 'me/navigate-active-search)
        ;; Evil tracks this for us.
        (setq me/navigate-direction nil)
        )
      (advice-add 'evil-ex-start-search :before #'me/trace-search)

      (defun me/traced-vcs-next-hunk ()
        "Wrapper function around spacemacs/vcs-*-hunk to track
that we are navigating through hunks in a particular direction. Any
interactive user should use this function, but the underlying nagivate-*
functions should not call this wrapper or else they can/will invert
me/navigation-direciton."
        (interactive)
        (setq me/navigate-active 'me/navigate-active-hunks)
        (setq me/navigate-direction 'me/navigate-forward)
        (spacemacs/vcs-next-hunk))

      (defun me/traced-vcs-previous-hunk ()
        "Wrapper function around spacemacs/vcs-*-hunk to track
that we are navigating through hunks in a particular direction. Any
interactive user should use this function, but the underlying nagivate-*
functions should not call this wrapper or else they can/will invert
me/navigation-direciton."
        (interactive)
        (setq me/navigate-active 'me/navigate-active-hunks)
        (setq me/navigate-direction 'me/navigate-reverse)
        (spacemacs/vcs-previous-hunk))

      (defun me/traced-next-error ()
        "Wrapper function around me/*-error to track
that we are navigating through errors in a particular direction. Any
interactive user should use this function, but the underlying nagivate-*
functions should not call this wrapper or else they can/will invert
me/navigation-direciton."
        (interactive)
        (setq me/navigate-active 'me/navigate-active-errors)
        (setq me/navigate-direction 'me/navigate-forward)
        (me/next-error))

      (defun me/traced-previous-error ()
        "Wrapper function around me/*-error to track
that we are navigating through errors in a particular direction. Any
interactive user should use this function, but the underlying nagivate-*
functions should not call this wrapper or else they can/will invert
me/navigation-direciton."
        (interactive)
        (setq me/navigate-active 'me/navigate-active-errors)
        (setq me/navigate-direction 'me/navigate-reverse)
        (me/previous-error))

      (define-key evil-normal-state-map (kbd "n")
        (defun me/navigate-next ()
          (interactive)
          (cl-case me/navigate-active
            ('me/navigate-active-search (evil-ex-search-next))
            ('me/navigate-active-hunks
             (if (eq me/navigate-direction 'me/navigate-forward)
                 (spacemacs/vcs-next-hunk)
               (spacemacs/vcs-previous-hunk))
             )
            ('me/navigate-active-errors
             (if (eq me/navigate-direction 'me/navigate-forward)
                 (me/next-error)
               (me/previous-error))
             )
            (t nil))))
      (apply #'evil-set-command-properties #'me/navigate-next
             (evil-get-command-properties #'evil-ex-search-next))

      (define-key evil-normal-state-map (kbd "N")
        (defun me/navigate-previous ()
          (interactive)
          (cl-case me/navigate-active
            ('me/navigate-active-search (evil-ex-search-previous))
            ('me/navigate-active-hunks
             (if (eq me/navigate-direction 'me/navigate-forward)
                 (spacemacs/vcs-previous-hunk)
               (spacemacs/vcs-next-hunk))
             )
            ('me/navigate-active-errors
             (if (eq me/navigate-direction 'me/navigate-forward)
                 (me/previous-error)
               (me/next-error))
             )
            (t nil))))
      (apply #'evil-set-command-properties #'me/navigate-previous
             (evil-get-command-properties #'evil-ex-search-previous))
  ))

  ;; Configure dired.
  ((lambda ()
     (evil-collection-define-key 'normal 'dired-mode-map
       "h" #'dired-up-directory
       "l" #'dired-find-file)
     (setq dired-listing-switches "-agho --group-directories-first")
  ))

  ;; Override the standard `evil-quit` function to handle closing
  ;; a tab before closing emacs. See the issue link below.
  ;;
  ;; https://github.com/emacs-evil/evil/issues/1624
  (evil-define-command evil-quit (&optional force)
    "Closes the current window, current frame, current tab, Emacs.
If the current frame belongs to some client the client connection
is closed."
    :repeat nil
    (interactive "<!>")
    (condition-case nil
        (delete-window)
      (error
       (if (and (boundp 'server-buffer-clients)
                (fboundp 'server-edit)
                (fboundp 'server-buffer-done)
                server-buffer-clients)
           (if force
               (server-buffer-done (current-buffer))
             (server-edit))
         (condition-case nil
             (delete-frame)
           (error
            (condition-case nil
                (tab-bar-close-tab)
              (error
               (if force
                   (kill-emacs)
                 (save-buffers-kill-emacs))
               ))
            ))))
      ))

  ;; Override the standard `evil-ret-gen` function to handle
  ;; opening buffers from buffer-menu. See the issue link below.
  ;;
  ;; https://github.com/emacs-evil/evil-collection/issues/631
  (defun evil-ret-gen (count indent?)
    (let* ((field  (get-char-property (point) 'field))
          (button (get-char-property (point) 'button))
          (doc    (get-char-property (point) 'widget-doc))
          (widget (or field button doc)))
      (cond
      ((and widget
            (fboundp 'widget-type)
            (fboundp 'widget-button-press)
            (or (and (symbolp widget)
                      (get widget 'widget-type))
                (and (consp widget)
                      (get (widget-type widget) 'widget-type))))
        (when (evil-operator-state-p)
          (setq evil-inhibit-operator t))
        (when (fboundp 'widget-button-press)
          (widget-button-press (point))))
      ((and (fboundp 'button-at)
            (fboundp 'push-button)
            (button-at (point)))
        (when (evil-operator-state-p)
          (setq evil-inhibit-operator t))
        (push-button))
      ((or (evil-emacs-state-p)
            (and (evil-insert-state-p)
                (not buffer-read-only)))
        (if (not indent?)
            (newline count)
          (delete-horizontal-space t)
          (newline count)
          (indent-according-to-mode)))
      ((eq 'Buffer-menu-mode major-mode)
        (Buffer-menu-this-window))
      (t
        (evil-next-line-first-non-blank count)))))

  ;; Prompt before exiting emacs.
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Configure org-babel.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (python . t)
     (shell . t)
     ))
  (setq org-confirm-babel-evaluate nil)

  ;; Load a local configuration file if it exists. This is used
  ;; to add machine specific setup that I don't want to commit
  ;; to git.
  (when (file-exists-p me/local-config-file) (load-file me/local-config-file))

  ;; Suppress native comp from popping up the warnings buffer.
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; Update org mode bullets.
  (setq org-superstar-headline-bullets-list '(?◉ ?○))
  (setq org-superstar-cycle-headline-bullets nil)
)

(setq me/local-config-file "~/.emacs-local-config.el")

(defun me/find-local-config ()
  "Edit the local emacs configuration, in the current window."
  (interactive)
  (find-file me/local-config-file))

(defun me/open-dired ()
  "If in a project, open dired at the project root. Otherwise open
dired in the directory of the current buffer."
  (interactive)
  (if (projectile-project-p)
      (projectile-dired)
      (dired-jump)
    )
  )

(defun me/set-leader-keys (key def &rest bindings)
  "Add KEY and DEF as key bindings under `me/leader-key'.
KEY should be a string suitable for passing to `kbd', and it
should not include the leaders. DEF is most likely a quoted
command. See `define-key' for more information about the possible
choices for DEF. This function simply uses `define-key' to add
the bindings.

For convenience, this function will accept additional KEY DEF
pairs. For example,

\(me/set-leader-keys
   \"a\" 'command1
   \"C-c\" 'command2
   \"bb\" 'command3\)

This function was taken from spacemacs/set-leader-keys and
adapted to configure my keymap."
  (while key
    (define-key me/default-map (kbd key) def)
    (setq key (pop bindings) def (pop bindings))))

(defun me/declare-prefix (prefix name &rest more)
  "Declare a prefix PREFIX. PREFIX is a string describing a key
sequence. NAME is a string used as the prefix command.

This function was taken from spacemacs/declare-prefix and
adapted to configure my keymap."
  (declare (indent defun))
  (apply #'which-key-add-keymap-based-replacements me/default-map
         prefix name more))

(defun me/error-exists ()
  "Returns non-nil if at least one error exists in file."
  (interactive)
  (save-excursion
    (evil-goto-first-line)
    ;; This line will error if no errors are found in the file.
    (spacemacs/next-error)
    t))

(defun me/next-error ()
  "Wrapper around spacemacs/next-error which wraps to the top of
the file to find the next error (if needed)."
  (interactive)
  (if (me/error-exists)
      (condition-case nil
          ;; We know an error exists, so if spacemacs/next-error
          ;; fails, wrap to the top of the file and then search
          ;; again for the error.
          (spacemacs/next-error)
          (error (evil-goto-first-line) (spacemacs/next-error))
      )
  ))

(defun me/previous-error ()
  "Wrapper around spacemacs/previous-error which wraps to the bottom of
the file to find the previous error (if needed)."
  (interactive)
  (if (me/error-exists)
      (condition-case nil
          ;; We know an error exists, so if spacemacs/previous-error
          ;; fails, wrap to the bottom of the file and then search
          ;; again for the error.
          (spacemacs/previous-error)
        (error (evil-goto-line) (spacemacs/previous-error))
        )
    ))

(defun me/shorten-filepath (filepath max-length)
  "Given a FILEPATH, shorten it for display purposes
to no longer than MAX-LENGTH (on a best effort basis)
by abbreviating directories to a single letter."
  (let ((current-length (length filepath)))
    (string-join
     (mapcar
      (lambda (ss)
        (if (and (> current-length max-length) (> (length ss) 1))
            (progn
              (cl-decf current-length (1- (length ss)))
              (substring ss 0 1))
          ss))
      (split-string filepath "/")) "/")))

(defvar me/git-modeline "" "Last value of the modeline")
(make-variable-buffer-local 'me/git-modeline)

(defun me/in-git-p ()
  (not (string-match "^fatal" (shell-command-to-string "git rev-parse --git-dir"))))

(defun me/git-status ()
  (let ((U 0)
        (M 0)
        (O 0)
        (U-files (list))
        (M-files (list))
        (O-files (list)))
    (dolist (line (split-string
                   (shell-command-to-string "git status --porcelain")
                   "\n"))
      (cond

       ((string= "" line) nil)

       ((string-match "^\\?\\?" line)
        (setq U (+ 1 U))
        (push line U-files))

       ((string-match "^ M" line)
        (setq M (+ 1 M))
        (push line M-files))

       (t
        (setq O (+ 1 O))
        (push line O-files))))

    (remove-if-not #'identity (list
     (me/git-current-branch)
     (when (> M 0) (propertize
      (format "m:%d" M)
      'help-echo (string-join M-files "\n")))
     (when (> U 0) (propertize
      (format "u:%d" U)
      'help-echo (string-join U-files "\n")))
     (when (> O 0) (propertize
      (format "o:%d" O)
      'help-echo (string-join O-files "\n")))
      ))))

(defun me/git-current-branch ()
  (string-trim-right (shell-command-to-string
                      "git rev-parse --abbrev-ref HEAD")))

(defun me/update-git-modeline ()
  (setq me/git-modeline (if (me/in-git-p) (string-join (me/git-status) "|") "")))

(defun me/test (fn test-cases)
  (dolist (test-case test-cases)
    (let*
        ((args (first test-case))
         (expected (second test-case))
         (actual (apply fn args))
         (test-passed (equal expected actual)))
      (princ (format
              "[%s] (%s %s) -> %S%s\n"
              (if test-passed "PASS" "FAIL")
              fn
              (string-join (mapcar (lambda (arg)(format "%S" arg)) args) " ")
              actual
              (if test-passed
                  ""
                (format ", expected %S" expected)))))))

;; Wrap all the tests in a function so they don't automatically
;; run on every startup.
(defun me/all-tests ()
  (me/test #'me/shorten-filepath
           '(
             (("foo" 5) "foo")
             (("foo/bar" 5) "f/bar")
             (("foo/bar" 10) "foo/bar")
             (("/absolute/path" 10) "/a/path")
             ))
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(csv-mode slime-company slime common-lisp-snippets ivy-rtags google-c-style gendoxy flycheck-ycmd flycheck-rtags disaster cpp-auto-include company-ycmd ycmd request-deferred company-rtags rtags company-c-headers ccls yaml-mode yapfify sphinx-doc pytest pyenv-mode pydoc py-isort poetry pippel pipenv load-env-vars pyvenv pip-requirements nose lsp-python-ms lsp-pyright live-py-mode importmagic epc ctable concurrent deferred dap-mode bui cython-mode company-anaconda code-cells blacken anaconda-mode pythonic git-gutter-fringe fringe-helper git-gutter diff-hl browse-at-remote ivy-rich persistent-scratch wgrep smex lsp-ivy ivy-yasnippet ivy-xref ivy-purpose ivy-hydra ivy-avy counsel-projectile counsel swiper ivy stickyfunc-enhance srefactor yasnippet-snippets xterm-color web-beautify vterm treemacs-magit toml-mode terminal-here smeargle shell-pop ron-mode racer rust-mode prettier-js npm-mode nord-theme nodejs-repl multi-term lsp-ui lsp-treemacs lsp-origami origami livid-mode skewer-mode simple-httpd json-reformat json-navigator hierarchy json-mode json-snatcher js2-refactor multiple-cursors js2-mode js-doc helm-lsp lsp-mode helm-ls-git helm-git-grep helm-company helm-c-yasnippet gitignore-templates git-timemachine git-modes git-messenger git-link fuzzy forge yaml magit ghub closql emacsql-sqlite emacsql treepy magit-section git-commit with-editor transient flycheck-rust flycheck-pos-tip pos-tip eshell-z eshell-prompt-extras esh-help company cargo markdown-mode auto-yasnippet yasnippet ac-ispell auto-complete ws-butler writeroom-mode winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package undo-tree treemacs-projectile treemacs-persp treemacs-icons-dired treemacs-evil toc-org symon symbol-overlay string-inflection string-edit spaceline-all-the-icons restart-emacs request rainbow-delimiters quickrun popwin pcre2el password-generator paradox overseer org-superstar open-junk-file nameless multi-line macrostep lorem-ipsum link-hint inspector info+ indent-guide hybrid-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation hide-comnt helm-xref helm-themes helm-swoop helm-purpose helm-projectile helm-org helm-mode-manager helm-make helm-flx helm-descbinds helm-ag google-translate golden-ratio font-lock+ flycheck-package flycheck-elsa flx-ido fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-terminal-cursor-changer evil-surround evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-easymotion evil-collection evil-cleverparens evil-args evil-anzu eval-sexp-fu emr elisp-slime-nav elisp-def editorconfig dumb-jump drag-stuff dotenv-mode dired-quick-sort diminish devdocs define-word column-enforce-mode clean-aindent-mode centered-cursor-mode auto-highlight-symbol auto-compile aggressive-indent ace-link ace-jump-helm-line)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(highlight-parentheses-highlight ((nil (:weight ultra-bold))) t))
)
